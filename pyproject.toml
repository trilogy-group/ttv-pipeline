[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ttv-pipeline-api"
version = "0.1.0"
description = "TTV Pipeline API Server with HTTP/3 support"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # API Server dependencies
    "fastapi>=0.104.0",
    "hypercorn[h3]>=0.16.0",
    "uvloop>=0.19.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "redis>=5.0.0",
    "rq>=1.15.0",
    "google-cloud-storage>=2.10.0",
    "httpx>=0.25.0",
    "trio>=0.23.0",
    "click>=8.1.0",
    "pyyaml>=6.0.0",
    
    # Pipeline dependencies
    "tqdm>=4.64.0",
    "ffmpeg-python>=0.2.0",
    "openai>=1.0.0",
    "instructor>=0.4.0",
    "pillow>=9.0.0",
    "requests>=2.28.0",
    "python-dotenv>=1.0.0",
    "stability-sdk>=0.6.0",
    "google-generativeai>=0.8.0",
    "runwayml>=3.1.0",
    "google-genai>=0.1.0",
    "google-auth>=2.23.0",
    "aiohttp>=3.8.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-trio>=0.8.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
]

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Custom markers
markers = [
    "integration: marks tests as integration tests (may require running services)",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
    "http3: marks tests related to HTTP/3 functionality",
    "angie: marks tests related to Angie proxy configuration",
    "security: marks tests related to security features",
    "performance: marks tests that measure performance",
]

# Test output
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--durations=10",
]

# Asyncio configuration
asyncio_mode = "auto"

# Filtering
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:httpx.*",
]

# Minimum version
minversion = "6.0"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "rq.*",
    "google.cloud.*",
    "trio.*",
    "hypercorn.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.coverage.run]
source = ["api"]
omit = [
    "tests/*",
    "examples/*",
    "scripts/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]