# Docker Compose configuration for TTV Pipeline API
# Full stack deployment with HTTP/3 support and environment management

services:
  # Nginx edge proxy with HTTP/3 support
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTPS_PORT:-443}:443/tcp"    # HTTPS
      - "${NGINX_HTTP_PORT:-80}:80/tcp"       # HTTP redirect
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${CERTS_PATH:-./certs}:/etc/ssl/certs:ro
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI application server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: api
    environment:
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - API_QUIC_PORT=${API_QUIC_PORT:-8443}
      - API_WORKERS=${API_WORKERS:-2}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - GCS_BUCKET=${GCS_BUCKET:-ttv-api-artifacts}
      - GCS_CREDENTIALS_PATH=/app/credentials/gcs-key.json
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ${CREDENTIALS_PATH:-./credentials}:/app/credentials:ro
      - ${PIPELINE_CONFIG_PATH:-./pipeline_config.yaml}:/app/pipeline_config.yaml:ro
      - ${API_CONFIG_PATH:-./api_config.yaml}:/app/api_config.yaml:ro
    ports:
      - "${API_HTTP_PORT:-8000}:8000/tcp"   # HTTP
      - "${API_QUIC_PORT:-8443}:8443/udp"   # QUIC
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # RQ workers for job processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: worker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - GCS_BUCKET=${GCS_BUCKET:-ttv-api-artifacts}
      - GCS_CREDENTIALS_PATH=/app/credentials/gcs-key.json
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MINIMAX_API_KEY=${MINIMAX_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ${CREDENTIALS_PATH:-./credentials}:/app/credentials:ro
      - ${PIPELINE_CONFIG_PATH:-./pipeline_config.yaml}:/app/pipeline_config.yaml:ro
      - ${API_CONFIG_PATH:-./api_config.yaml}:/app/api_config.yaml:ro
      - ./ai-coe-454404-df4ebc146821.json:/app/credentials.json:ro  # Mount GCS service account as credentials.json
      - /tmp:/tmp  # For temporary video processing
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional GPU worker for GPU-accelerated processing
  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: gpu-worker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - GCS_BUCKET=${GCS_BUCKET:-ttv-api-artifacts}
      - GCS_CREDENTIALS_PATH=/app/credentials/gcs-key.json
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NVIDIA_VISIBLE_DEVICES=all
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MINIMAX_API_KEY=${MINIMAX_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ${CREDENTIALS_PATH:-./credentials}:/app/credentials:ro
      - ${PIPELINE_CONFIG_PATH:-./pipeline_config.yaml}:/app/pipeline_config.yaml:ro
      - ${API_CONFIG_PATH:-./api_config.yaml}:/app/api_config.yaml:ro
      - /tmp:/tmp
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    deploy:
      replicas: ${GPU_WORKER_REPLICAS:-0}  # Disabled by default
    runtime: nvidia
    profiles:
      - gpu  # Only start with --profile gpu

  # Redis for job queue and metadata storage
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - api-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

  # Optional: Redis Commander for debugging (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - api-network
    profiles:
      - debug  # Only start with --profile debug

networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local